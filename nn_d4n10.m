function [y1,xf1] = nn_d4n10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2019 17:35:02.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   xi1 = 2x4 matrix, initial 4 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x4 matrix, final 4 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Layer 1
b1 = [10.327877936331542941;8.1565733000210407511;13.595608401091174855;-21.601207583601592432;3.8776777946254283869;8.154162492342193147;-6.1621071280520860469;29.782598304703721936;13.262927183303945711;10.807157619073381127];
IW1_1 = [-16.050182404059640362 13.92603605526286259 -11.030612299452499769 6.0306382953585950801 -2.6145714617823427872 -6.8096348390253735872 17.574145096771157881 -3.6196424364038617405;27.810938546842546515 -25.046229356574890801 -9.3755691181478688634 7.1442968994061617494 3.5343057909261967886 12.275904986249111417 -24.11072540190165725 13.735177856207252844;-17.034183630102099016 32.127935969517317005 -10.713823502790944531 1.8142025441612601444 -3.3655430854275949493 -4.7177312290599404676 31.344535209336825687 -13.863850281567041023;-4.7437648530037126449 10.587407537337369945 8.4614731829230116489 0.0067273389481783407717 18.768367860799642699 7.7888797552852455652 27.115674091973744453 12.914758741304007472;-5.951138090444980655 0.6165685033307447549 5.553313617478740305 2.4146831642951096519 -3.2357926215707637496 -6.2768994121912848883 -3.6958705790123760337 3.5564532571951938955;17.955212482395054963 -19.255087298663625006 5.0687411816640182138 2.6810578047531761214 -2.6872795238289488573 10.815929907964173751 -23.642158090171768947 15.426550973232011188;4.6447845942118846096 -15.54843958206448562 16.445993892288964133 1.9192406443405778393 -8.6961947723707684332 6.0686026635221743675 -9.5348876076439381677 -1.2245723582492342718;22.452819971455809878 2.435259147610824737 -12.013908549065689613 8.803335797483002878 -11.086623511185255353 15.851957651494791079 -4.541465649515386005 6.8645027976127668268;-17.176964625819884702 31.339720219962167391 -9.7508859637237073059 1.7318578654427898567 -3.4044104561404120446 -4.9237411873032002063 30.427726809932895691 -13.062763706919438889;-21.447654857510705995 27.131239134470728658 -13.996565695868595114 -10.755102032011418345 16.847700325041675029 -5.2120630223075119503 13.846694908429718396 2.8449767119676221405];

% Layer 2
b2 = -1.4614194605843215946;
LW2_1 = [-0.33038744168848055427 0.98822987056677302764 -10.003105736442039486 0.95421212730101034882 1.3014189226177685921 -0.98738148259484714853 1.1771093013010487383 0.43542004725541283428 10.424668894638754679 0.76390008245195195613];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+3,5)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4]-1,5)+1),8,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 4);
xits = finalxts(finalxts<=4);
xts = finalxts(finalxts>4)-4;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
