function [y1,xf1,xf2] = narx_d2n10_3inputs(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 08:46:10.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [8.9561667087223941763;-4.1434994743182276267;-11.474967900876213989;-1.7051574334602581651;8.7675888597863114171;8.4426842174641318906;1.4401141644326842517;-6.4941864393626422824;-7.3470928481378976471;7.0382470987239864613];
IW1_1 = [-27.025505840637002564 26.084049750574376247 -0.66385018240965443237 23.580115230208214427 -10.905615983186352835 0.05015595934222906449;5.5577379529440786854 16.723854926042228897 2.4662478982353683854 -7.0385713688737210347 -9.2016174001113615333 2.2560720349448382116;13.56805594216774935 -15.019084639928022895 -3.7574477820770000314 -9.6414615989283714015 1.8546173150977103283 1.9800718797141370064;23.40812195320338418 -24.364013069485974228 1.9506557542375972947 -17.266529584550859511 3.4498679797673039715 1.1794267772046522769;-9.0369006098381063907 19.698595968666371192 -2.2521789771102742606 5.8795356147228483579 -7.7136566316743921945 0.72145172845245841842;-27.122922846618784831 25.123883542353844689 -0.15183454160545739597 23.816442432180078725 -10.782761935795010189 1.2991884367536481459;-1.5161785629818373966 -0.5145208209131370003 1.1500774716790365115 1.4896675316937899591 0.41800319647795747269 -1.5943789491613371556;17.259747276033145624 -15.649357709386208626 1.9922313698735760745 -13.636758874366911698 3.4700965136910078002 -0.40069749546238919713;-0.059573801625888142541 -4.5989607658250992728 2.2585816545529175947 -4.5967596927856000377 -0.4268393552409511793 2.58264166654905436;4.0137379387251934659 3.6668576517804698511 -2.0922156740562409816 0.56989502787353552016 0.46310993887888796117 -2.9787105191666998216];
IW1_2 = [-0.79029046473280684104 1.377028083681736792;1.5367132388815900601 1.2439991087104196321;-3.2828392104517676309 1.2121503836288309852;3.7207406831711753448 2.4035847433888739566;-2.2014247151561718852 0.80168970938725914177;-1.2903857765232926713 0.12329704977190804327;-0.10189056080113460812 -2.5741407857212461607;0.70585561923460971023 -1.5165964452397771023;2.2227647612457905879 2.1631321058179886485;-2.7237160333918022381 -1.9423353344727358749];

% Layer 2
b2 = 7.5869833345185462292;
LW2_1 = [7.8974555702303312898 3.8735765568725839536 3.8259668563217843484 -1.1592281134451731806 -4.8958082309751400629 -9.0158406281876661836 2.6683710217440372858 -3.8545084667096181086 -3.7100684651720223783 -6.2651617360105706922];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
