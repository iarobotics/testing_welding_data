function [y1,xf1,xf2] = narx_d2n10(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 11-May-2019 22:54:21.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 2x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [8.0916883182664989249;6.1316601095481493289;-8.226004977896499426;7.1291950793143472609;1.7563948577823900177;-3.7715952017928344731;-1.5036726919046572437;0.82141804066099433079;5.9714805976629072859;0.60036473587190875012];
IW1_1 = [-11.201524881744786555 13.640249327176366734 8.068871044419287486 -0.29868669464194341767;-3.1844924479955745156 -13.671130189283163148 0.22927309050010791225 -3.4787643977868074607;21.837815168290855894 -18.211052157166911059 -18.09657638758752185 3.8413270114791200349;-23.950564223169166667 19.898426734576265318 19.547176497441718368 -3.9025583060800705937;18.410718764653513091 -16.268761659921786134 -15.073201811522306315 3.2078148341974386248;-0.080947587562870348954 0.077040040934128709016 0.06505304399578276664 0.0038929843986121688212;-10.359452274638094593 10.537469621843696288 8.3329977925293334806 -1.7614545577957645417;3.0977683219806744219 -10.48439687903686135 -0.23342000584674818531 -4.0702587183140499505;59.508234142165598257 -30.755209802819162945 -57.416273480446051281 23.658775990959203028;-14.940766657034874498 14.519509526897619978 11.963198822061841042 -2.0560769835714842735];
IW1_2 = [3.0798607633717516308 -2.4060495611668994975;-5.7782757988716975106 -5.1765067621898133154;2.2244130548960638905 -2.9697736696642063059;3.5808085229721111631 -4.7244948789074774353;-3.7136079904582635081 -6.2159606444833972461;-2.3715646361364028927 4.9148242557711414591;8.5906299842597579897 -2.0590061415518001731;-4.2646905005232786934 -6.1153826946894351835;-5.4649701810602904217 -3.353905122710437503;-2.2367769003359705415 -3.9089544703353502619];

% Layer 2
b2 = 31.641588970070507969;
LW2_1 = [-4.3360585584470054954 -0.57190918946504543108 14.707513281545379513 9.1515537561911948217 -20.449041290319922126 14.731375037296633224 -3.8080113952540788347 -1.4289755691023062756 0.72342483931994050472 9.9016553148865700251];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
