function [y1,xf1,xf2] = narx_cl_d2n10_3in(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
% targetting sc
% Auto-generated by MATLAB, 12-May-2019 16:43:11.
% 
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [3.8992705972855827845;-1.5212424611214774295;-4.7333237800620073799;-5.9334676593556112678;21.305934677591565674;5.0377088821461191159;30.246026391396046762;1.1821849109608426609;-4.107313019735546078;-4.048268537385785848];
IW1_1 = [-38.682234899065413458 19.107907674224996697 -0.66369654039580150418 35.762357530445910925 -13.179272279530721335 0.43777225580270617833;-2.8713479958241050483 -8.7980803928755264565 -1.4093845067474040089 4.2713301254307651789 4.8738808675467657494 1.4224970591531789221;3.3652634000506167489 14.647950283714330055 2.9913302994495150067 -5.4607157854170962352 -5.2545788843505949473 1.7472341546331171536;51.07210600764823738 -29.138128596864834918 1.0139870009208546975 -47.41872240216765988 20.401118009794309671 -0.61323711080560094899;-69.4473286714633673 57.6903397329241443 -1.1746676003266134369 57.969667450800884012 -12.946848219892537202 2.7849002969583747102;-6.664661889469205569 -17.615595774622505587 -2.0680024483155454718 9.5710334629582725086 4.8629568174282189474 -3.1972559996235978552;-52.861946627305044899 61.090855125446068996 -2.9580481124210766808 36.19186003982701294 -1.5714823506307262768 2.6741505871718378451;-0.37243040509440611396 10.945050478291800999 -0.95307897782714179336 -1.0370076514420210056 -6.6755831498240221222 1.4099070742815025259;28.909196100959313469 -10.691771776802191596 -5.5586342868234481784 -26.374683604863118802 2.6164567690105942077 5.1581361110096279887;26.433650411205238839 -11.919527524187026657 0.49254930297817944851 -24.057947854439838409 4.2335262060917946414 -1.232070429845583126];
IW1_2 = [-1.8967248527082818388 0.47734042072473759077;-0.51179147601820540459 2.4820359392475777049;1.6373094497175257889 2.0812726403297157063;1.5774968217777276536 -0.013689485517497568604;-2.032247337972873158 1.3858008519574871453;-3.2773999881505981868 -2.2949524369851501682;-2.433522057247700765 3.7094406021089101344;-2.5509241082342617446 -0.17914797645761482148;-5.3889435292382987797 6.5329554265267972823;1.8080376479867130701 -0.43479641676256669536];

% Layer 2
b2 = 9.4437612860538031612;
LW2_1 = [1.8227240960666148961 4.6440490898687212251 17.110853521640439823 1.7793069180183263001 -0.42625068115116732104 7.6685239042398896103 0.45053394202975965976 4.3395244037048374963 -4.6444625811416715422 5.40628782091925153];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
