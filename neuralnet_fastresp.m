function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Apr-2019 21:47:32.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x10 cell 2, initial 10 input delay states.
%   Each Xi{1,ts} = 2xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 10 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x10 cell 2, final 10 input delay states.
%   Each Xf{1,ts} = 2xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [-6.3778730886607526429;-5.2050840440566776834;-6.632273596585240405;-3.6400979074192694185;2.9773026875589359008;-2.6235380790503510795;-6.8959272171693370979;-5.9601851316680010129;-2.0001140898166416271;-3.8921367141101379516];
IW1_1 = [3.4482054468585956464 -5.6990372319220217179 3.1214693774431463424 -2.4555268160866496885 -0.36181820926612795475 0.57135878928398120546 -1.3305563058161107293 -0.23453226846239877412 -2.2162952668732804895 0.33774010604568543981 -0.66125741202158738741 -0.67053986617693728256 1.5953026822342994961 0.13804932331053321182 -1.6569963753711161036 -0.14176413667880757852 0.58361333681597660217 -0.3632574365851288789 -0.33525445605640225022 -0.22513910448075297177;6.20558249777183768 -4.2676097236923569156 -0.76911645669886119503 -2.2412429794529997729 -0.02961173677604631016 -1.0843666910180003171 -1.1041314915624169668 -0.34589477789672101737 0.80292974129297645103 0.63752808994053189462 -2.56724619202827542 1.2815951018989248933 -3.0723352497017937246 -0.39237563584255258364 2.7132371213199371063 -0.52574789555317513745 0.16745021017753480841 -0.46955937296698574412 -0.27562576429980112369 -0.090081669470225569918;36.167608371021856328 -21.272608623750709711 -20.887530753336935874 7.869454604172387846 -3.9170698180641903008 1.5751019120490330483 -8.7378329083885315498 6.3433084283929117575 0.81076767144485573091 0.037287187406450983396 0.84812935151895230135 -4.7221960876564992304 -9.430372827903799049 -0.98265077569132264212 5.7508445013980677984 -1.2245859419267670631 5.5950935917373474382 1.2051072640504267852 -3.4344550976633456685 0.6839328284416668069;3.4695821106629010089 -5.8559200692370128039 2.2533698661998791124 -3.1088637347289149737 0.10546693502913671858 1.3959778163397531525 -1.7886550321919987283 -0.72391560503552743189 -2.7930778898549486478 -0.3549118456087324569 -0.15015924292304408394 -0.18606105132564851323 1.5062162608808380426 0.7978072413453969336 -0.14155312666342637073 -0.36009915472974368678 0.039971131017825636822 -0.28009460788538886877 -0.17472475946093626864 -0.5100977537948822027;2.050751289803848465 1.4421415627796825287 -0.49772506235505792338 3.3579045583552296073 -2.5406902746828734507 1.9961423497948966865 -0.82495748931795054304 1.0219772945432097355 -0.16049473315271262086 0.19054195748333452309 0.35689243865187453286 -0.81134958996730355274 0.28894765188436777326 -0.66547641071196028673 -0.24896779374780325655 -0.16156261721878004134 0.10540284699995450257 0.23566728764173364152 -0.080957041820470518334 0.54737981450801831418;-0.14378135089258858859 2.7927970715368228838 -0.016687416150539528814 3.7315151186484984969 -1.9987276012108670109 1.8493580203825408237 -1.0363254098399818925 -0.6481718717117772588 -1.0313517991411114139 -1.1958012284927783675 1.3604925563850511772 -2.0321556408178387265 2.5162182534189523331 0.092704682966816109868 -3.2808188150736761202 2.2924037815685034403 0.92219784386515490926 -0.54838640567467944464 0.75421690310503342047 0.59944793430390730382;17.313467890185936682 -9.3218153347473240444 -4.4241653517037535792 0.58107782371868221816 -3.0258051279050119931 0.33993269500301737107 -1.7240587004697545126 3.2772180274247677545 -0.41886331837255702526 -0.91712706187583858952 -0.99610142259451095459 -2.6660182007501194157 -3.6546772542773924286 -1.7902549711334487803 0.043288735800425921785 -0.38990659847934372451 1.7960999865234414941 0.81750030101467696664 -2.404372358274131205 0.70032475034311714168;16.351390314739180809 -11.664725826450318635 -4.4696241302729449174 1.8219022528857817811 -4.0059322708009945657 2.7539783853760084753 -3.5809367325856560349 3.1039064232178321667 -0.9554494450850237186 -0.86424276674080469096 0.4219472292210422748 -4.1769448178598187482 -1.2882098143894458175 -0.6540014948898389413 -1.1504704383377075683 -0.3322083794737117346 2.880794320348041726 0.8764896219400976074 -2.0674440709516614945 0.41772548695243455485;3.1373489917586736553 3.3516636159032011655 -6.1530442647938246026 3.0678651993905736717 -0.89107232646584044744 1.2267579035146183308 -1.1316772166935227251 -0.77184109820653135081 0.91098244542611617192 -1.594641905250628211 0.26279878509372123219 0.28913012103976309941 -2.1966825167356232029 0.65966521624533103196 3.029518183053450997 0.98583775769392212318 0.10187871867912939861 -0.035513119427847857079 1.077125117645412633 0.20309134636548645259;3.0521366126701372501 -5.5566551727037234443 2.1509713459350212617 -3.1442066709006577518 0.28052578994392035616 1.1558557342870767748 -1.6117825946978574514 -0.73959991495772214876 -2.5872513439700295379 -0.34014722659142276884 -0.16193507103583584805 -0.11243061843027425672 1.3853457771356463279 0.78535754604207463903 -0.10983543805681018901 -0.32370374312416266838 0.031394726208914425225 -0.2797592513351020993 -0.15364942374717924234 -0.51279036497460195321];
IW1_2 = [3.2921818253637646912 -0.39529806594363164907 -0.87716249818981417707 -0.39837832888177188151 0.18125694122417068677 0.14406442835846491879 -1.6066497054819766088 0.14642331750805628876 -0.15886820318957578513 -0.14711101411349392087;3.7309129549931796532 -0.21769525518855967205 -0.57536637664945033954 -1.0966338728937636837 1.0937391237791516119 -0.29231828617245614321 -1.8438489746802826375 0.11385336176081300996 -0.11726163566250978609 -0.18637906290963260347;1.6774654692107824339 0.40548071868774493431 0.61196960161057778471 0.18253846834097564589 -1.2325991885894138633 0.083201242490162224952 -0.32540635346317958732 -0.1704802721376406649 -0.35318170526187270264 -0.035410586981451996902;0.38806424660668670246 -0.37003459902834495709 -0.61823494134388290444 -0.45597479706557147994 0.18237451236963722612 -0.19341731796026159773 -1.0048605963288830267 0.14635553294582182016 -0.11766273523645899568 -0.17442411386772110893;-0.88505499218213157242 0.21249801476592924954 0.71149312429272726366 0.6988802184540091611 -0.10234084368798426756 0.0039038751324500676337 1.1282668604863932416 -0.042942969168944751523 -0.19543678694203284185 0.10001693393124939935;2.6366598550577342586 1.2411902905562404165 1.7287659981891094763 -1.9511072216938007973 1.0674754969399944393 0.099555022377271665257 1.4119796128917598832 -0.12605129779348464569 0.11881697323754993045 0.30078818261202355799;2.8610685988026807181 -0.42692004875373978923 -0.45086413377980466555 -0.12438912150741392171 -0.3676737187970270937 -0.057877656603347087116 -0.0031504077135996655032 0.08812668853641347777 -0.33751429159427048798 0.054745696194137639934;2.1807508349233808431 -0.21857940255952804098 -0.23640979936477737877 0.062283960876040232735 -0.66747694062557816341 -0.017646538876040861188 -0.11813043001494949458 0.060784929265088057104 -0.35575650520467111404 0.052274270049785874492;2.8360120054303372683 1.3537849761691145289 1.2274570359298575539 -0.17974286063582758932 0.035919454270059825163 -0.28237828694163369381 1.2253233408787800318 -0.15344767316745080987 0.1742249628555326002 0.20629590680939632885;0.13334252914340263829 -0.36014661637010086936 -0.62836423800850715882 -0.47376088769262753031 0.17938200183921920727 -0.18139148385203254787 -1.0171971221572373434 0.13966241578673563306 -0.096341060474114434409 -0.16938355777137947822];

% Layer 2
b2 = 0.1290096234773765449;
LW2_1 = [4.9023488941084130133 -5.0285984736189384137 1.691036501031758954 4.2633921521213009598 -0.32428703076382642267 -5.8475228773581857666 4.1470985203087229465 -4.7376430644111735546 5.984723286488947025 -4.5647653395937437537];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,11);
for ts=1:10
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,11);
for ts=1:10
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
