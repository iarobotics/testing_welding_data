function [y1,xf1] = nio_d10n4_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2019 15:11:59.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [1.5003765228296714884;2.3698763487607372724;1.0225308840725655379;-2.4734075117283369494];
IW1_1 = [46.316704580571055772 -19.817504599229657458 15.416945984730551444 -10.305407366118430446 4.5454383012957739751 8.1875332750989997521 -18.694942023503550388 7.1579708242816293406 -26.591135429664841894 9.1018281828892053653 4.6554987815196238188 1.789389761575330029 -44.931194082983367366 9.1116090733393413359 22.748657593780791331 -1.0973005629764636115 -1.3402738259642745788 -5.1526453173026665056 -0.2991546677713802227 1.1742476505583709923;17.723692385129304228 -3.5893237323145608109 -3.9263148485414558486 -3.1634439636226430181 4.9804073147708631808 -0.6167807594577454644 -3.7291230710456759745 1.4811565186966983987 -6.678828869052876982 2.0343768779558670801 -0.20108690794115194334 3.4393238148192555315 -14.881874958730199054 -4.0857354481630334675 11.203349545747880001 1.1519239157374572269 -2.7005722819083617381 1.4139166135992269346 0.28412408483553869276 -0.25459747947432082027;-39.014651362083938579 20.899479347456079381 -15.283760924969616468 2.3337818715113356483 6.1119185100961184176 4.9680829894859845908 15.423694938802789522 -8.7921190943206379842 15.129330294225416864 -5.4289787648909539897 18.792224105960610103 2.5499119531594658383 -11.135970116268039121 4.5446009496088839441 10.586356908880437899 2.8002598100159783456 -1.6537911017231485822 -13.377045868388389493 -1.8299657224720167203 -5.6209461775299098818;29.484822705908868556 7.064842785676985315 -7.0152276004979743362 -4.6080108292306221074 -0.38300578275742769296 -0.064120772947525245256 23.923221070025675772 7.4020167789293731531 18.622062809879480483 -2.7461628392799752874 2.5757372778889413567 2.7826249732246535196 -31.273126546061675413 -0.15366522603192250829 -22.386700673054434674 5.8534002086019922828 2.1737369545169231699 3.6253431853124569173 -10.389632483025527776 -2.77053783272106946];

% Layer 2
b2 = -0.6686739823142356931;
LW2_1 = [-0.57943410672097794833 0.93236608313441127205 0.35312943973993859981 0.32819882322245852446];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
