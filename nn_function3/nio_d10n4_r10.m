function [y1,xf1] = nio_d10n4_r10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2019 15:28:53.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-8.953673021982149649;1.473442884128317365;-2.2437635332808545385;3.4919644415920836344];
IW1_1 = [0.13710348673212424675 -15.327548885047564298 -10.204352489816134408 3.5774780962524306283 -6.8525648817726620976 23.442947645283208402 -15.809240193733099744 9.5300069782385463668 -10.707472159344776585 6.1773307952531606446 14.405510294488257372 -8.4483961930201854074 21.215552972795883591 1.7656842495388749281 20.406295494867627838 -6.4115023719759269838 4.6394521358127853716 -1.8025739638696354206 -13.982515009598351696 -29.059369310772183326;45.897574987897222343 -19.641616199386788821 33.160823138449174508 -15.762017546431774662 10.631986460395301819 -11.187991663960143995 -22.367788834773559614 5.5722011492578271685 -29.402345736935764364 9.6336062828740072206 -20.769340319272295403 11.450668494129665476 -53.142545720249572128 20.945670862562010939 -33.136593611745325916 -2.0446452809262476435 19.558485911599291285 0.60091918232603802608 49.957297262110635927 -0.6044064963283941605;-16.832616203776542108 2.0115544959363758082 6.056228708237884284 0.68244442468221799825 -5.708434600449643348 2.9756366981341493272 2.6354727666191881674 -0.068094462862889351684 7.2320438791032577441 -0.3404198495412352754 3.0980335807451342411 -3.7825089457463576537 14.075848120958667664 -0.55587202904504962042 -3.7035026271261033415 -0.5301345296306162469 -0.37280668746778561351 0.63695362065429772525 -7.8754667956650088456 -0.16513358016387946758;-20.013334189922652229 8.7119392486889033478 -2.8235942210676916453 0.56029834193616201432 2.7119445184796990844 -2.8305227406254616085 7.2065962476167841899 -0.75330706518698142826 10.265646627232692722 0.10069567539750659546 0.65617879012334667799 0.37141991236178961699 -0.0065502367892204000493 0.25973164375935486881 -0.1009326263292726622 0.020726198444922544484 -0.073405451604504359797 0.17024126009371320922 -0.42634939467016752523 0.22775507561839949955];

% Layer 2
b2 = -0.99895455586150438965;
LW2_1 = [0.068570726015971250611 -0.53127243159911785586 -1.0047394326300662648 0.55569081359345706694];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
