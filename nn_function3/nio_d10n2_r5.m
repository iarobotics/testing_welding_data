function [y1,xf1] = nio_d10n2_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2019 15:09:54.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-0.97199669000153199327;-3.2602043128041757747];
IW1_1 = [25.191417225402492619 -17.931347322870628602 15.000689747516364747 -3.6744431036993701056 -1.1780406439191195567 6.5286326531895424452 -22.720288658142855809 8.2136746565921221475 -13.760671251319596564 4.6529958942173008651 3.6989131892821589531 -1.6330767191370394453 -2.6339014797219011399 -1.9529807750744316852 0.80024749102096282005 0.75038635545801313231 1.3603421665922557082 1.7066745035741934799 -3.5385548405975937314 -0.68094816817563763589;-24.89172676572379217 4.8225596415417930629 0.41509686663371403448 4.9256791884725483754 -3.695260434227917834 0.075892640323856327966 15.863225395129539663 -6.3991970843763015253 5.1940739305614984644 -6.944593809512187299 1.7982648187371521598 4.3010371950413768261 2.7298374441019812586 3.5556515415289919879 -1.7397402990002557299 -0.86651128293003798486 -3.3463944332104174073 -0.82016823001540029026 5.1750887611620894901 -0.2676122055662323862];

% Layer 2
b2 = -0.99054220011630977893;
LW2_1 = [-0.87389366695726733436 -0.86319397639841954906];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
