function [y1,xf1] = nio_d8n4_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:22:23.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x8 matrix, initial 8 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x8 matrix, final 8 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [6.0002880321577762857;5.9781042461135394106;-3.7262755835950520655;3.7232890865287560089];
IW1_1 = [-36.276646257421994335 -7.0753717962119146989 -5.0853119565616458075 -0.30755168146586719935 -12.509995901916308725 8.7752359736478453556 8.7393442548564284067 -7.080979000109864252 -4.1534912419515270798 -0.29712319584699586894 -22.31828021704270526 -5.0535635576358712839 25.419116138317871645 1.1514977521758160695 38.314312428942443489 -1.84778835559791621;55.242123940194986176 -25.452274716816472022 10.316143843590166895 -19.069310138571943014 4.4025478039040431 4.2040952335216097424 -31.08285547115246672 13.099660084545252658 -31.25250704413294045 17.685915088595457689 -11.240362754838301385 -2.7199236462192573072 -40.619662247952270206 12.116801795501158878 43.245725767146602436 4.6439158665359077105;26.629017172187676721 -26.786586478017191837 28.18755754804553959 2.5354122171870647762 -12.895519068319012845 2.9295605093087155879 -24.055769073738634489 9.0406779187311929746 -1.5762767292983956846 2.9578718596526578644 -4.9875745686265116063 5.4700596722261281002 -5.4538825540180315699 -5.3030014645569147902 -1.3588636610523314729 0.023781260511011270004;17.397875529046469723 -4.9213183197106804556 -2.2722904791444804573 -5.0875032199982381798 9.3305995480253169916 -1.7237592527780143392 -10.855021549324224139 2.3069240178653438456 -11.304241328124390975 7.6983892450978883559 -0.22600816537718473875 5.8277261515373703915 -18.292226397249184089 -6.0239359331905593109 18.016551463192449489 1.0650178849002644998];

% Layer 2
b2 = -0.54807042153431784204;
LW2_1 = [-0.4446835646877334014 -0.54778137200621579428 -0.39017394404556637877 0.93325356843118600914];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+7,9)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8]-1,9)+1),16,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 8);
xits = finalxts(finalxts<=8);
xts = finalxts(finalxts>8)-8;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
