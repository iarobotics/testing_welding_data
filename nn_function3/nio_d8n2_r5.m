function [y1,xf1] = nio_d8n2_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%3 inp
% Auto-generated by MATLAB, 12-May-2019 23:00:25.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x8 matrix, initial 8 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x8 matrix, final 8 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [2.7020652304196821625;-0.91266514818475152904];
IW1_1 = [19.547139435358978687 -4.1012718318911067783 0.20855087782410042241 -3.9413112005502153323 6.3734848786250450914 0.25879205277736616608 -14.959756379241655466 3.6553537121893837636 -3.3714625946687855063 6.3913583529951667472 -1.2462098303416404566 -2.0255027347717762254 -6.475812634248968358 -2.4767108352330953203 2.126807965672897538 0.24083016516063357471;24.66689043852649732 -19.196831307602629124 17.60296154715025807 -1.2384637503379885004 -1.1429734219816223284 5.0829671397090292473 -24.83398985770100964 7.1081689852712113264 -5.4871095681288570844 3.3506475339234897959 0.47149465063568596346 0.82688108514578861907 -11.004952021937157269 1.6180056828208038144 1.9170223138885429393 -1.4832092575718887062];

% Layer 2
b2 = -0.9951081854231974555;
LW2_1 = [0.8669467145860386692 -0.87183187379286808394];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+7,9)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8]-1,9)+1),16,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 8);
xits = finalxts(finalxts<=8);
xts = finalxts(finalxts>8)-8;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
