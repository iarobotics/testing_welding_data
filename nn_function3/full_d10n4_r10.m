function [y1,xf1] = full_d10n4_r10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-May-2019 22:06:58.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [20.887238664202619987;100.73295210357844098;36.697332298875920742;10.422124032012352046];
IW1_1 = [-54.620695743355689444 26.337397493617078936 8.7649575912953903156 27.968682567956300034 -17.752001366727078846 0.95116399010655883206 11.630134873256901429 10.63155334715458622 -0.55002316023692054969 7.5979925678670685585 -8.9719605779869677775 0.34962931264153573885 2.4910228992078158328 10.345252882186461107 -1.9450943223414238759 -1.9019711245676909073 -3.6249103889932152711 0.30751832391990802096 10.94415964083218995 1.4923520266343426321 1.0612712028581174906 1.859933846637189081 0.24659853061179148881 2.3221062173388911098 -5.3401340036306850223 -0.30742103142220345013 -3.0215978269524450539 -5.2327747718487582773 -4.4828158704340186347 -21.575357524601791681;118.41499805782014221 -97.413753362552967019 -111.98257713618974662 62.884830253177320003 -43.837580732706427966 -19.316648430134716108 -21.379396131958536387 -55.269238657744828913 -11.208179241274512705 36.246544514845943752 -6.1987508627325755839 -6.7245399816637316803 -84.296545477995010742 38.460556460725044303 -1.664347837102688521 -55.154855270804056033 4.3006666605467014364 -1.8197459876592547712 -40.277119452702144997 -20.755179785397050551 3.1125890512688814127 7.4447994667898980126 20.872262382491989285 8.3192159544778796487 23.919198872544463086 37.71364266044351865 40.272538776834736041 -47.481070101910937353 123.45568038817808088 3.3815143402979916942;80.469806077340621187 -53.684095952813400743 -26.221753500385613478 44.265867474719854613 -33.969382782449059732 -9.9641244391785388501 10.071156819212664146 -17.291241668502308926 -6.3847185901335263836 -40.962566478870499509 4.891148795271314853 -8.8986198830629597012 -31.18872463494870928 9.8114011315511184819 5.6862448350717942347 -23.734468443071744304 27.024554003467475383 0.42017262333754146209 -71.162721949100131269 58.604306615661371893 4.7877855743733190863 -50.60230486668619676 -7.2792576456176520949 -14.692027847046228217 14.799391532177894604 -13.234624774098254107 -3.9100142453268573739 74.777026396052519885 -1.8083948034048402675 0.45042148752002819645;4.5396910527077274367 0.24378877543676941153 1.3642782441473608745 -17.668938814186844866 -2.5697394890351743513 0.37039489992783519723 -0.0029956645455575525716 -1.1178092526194789436 0.52151013369298770961 5.602317387721384101 -6.8794753878935592795 -0.11814587791416387985 -4.3016684532138445007 10.341783199285661254 -0.69864964936550633112 4.333287357900265313 0.76545796067201998802 0.66521309092138725116 -23.830328197975195081 15.142303207927987785 1.3438481324100313152 28.860046276989727687 -7.3787616163393376922 1.5812943535189596389 -17.026312326925104657 6.6322518526333658073 0.17376473550190485451 14.435023809254190041 -6.8106555621196305239 -10.481406243181147886];

% Layer 2
b2 = -0.066779482829858016757;
LW2_1 = [-0.93235024595388404922 -0.28550788207049249134 -0.65792165492549359307 0.94402001282417924433];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),30,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
