function [y1,xf1] = nio_d2n8_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:37:26.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-0.37859853246681673955;0.20839355973970941083;-0.60028843404294762731;1.3195706584247910431;0.19879681805359389335;-1.9778958472411738434;-1.5957823000376547551;-0.082313908874689589723];
IW1_1 = [9.0012301210154923581 -3.0926885797369934039 -10.143187345971247382 4.2683138066371197894;17.678753683803211771 -5.8728703889214655121 -16.21870694488444542 4.8279673181122104708;15.167539792184278724 -0.8346878660641606773 -13.147515049382269225 1.057693800027925457;-3.3765830635409965765 5.2405997516938240821 2.2202872948612091264 -0.75191398275386844841;13.566582761374760935 -4.9224091211956055858 -12.586449577143746126 3.9311771653430636064;9.4790326571871084127 -7.5084973703523232302 -8.41331134652903323 2.8004797166102481931;6.1002218745619307683 -6.1680808455994027284 -4.9542968178906017229 1.7112430014511164078;-11.988037195137385638 5.2709441330201283193 11.45017802636268911 -3.9916557052711492126];

% Layer 2
b2 = -1.3625102010730971713;
LW2_1 = [-0.3166594897201998049 -6.9583069235201895353 -0.40179906847128016301 -4.1344271451515215432 13.932915345026522402 3.3687283951026087969 -7.7332720868875455267 6.3711277780087609557];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),4,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
