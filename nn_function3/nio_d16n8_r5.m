function [y1,xf1] = nio_d16n8_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:46:16.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x16 matrix, initial 16 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x16 matrix, final 16 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [3.1089530870085417824;5.5190251660532307909;3.5368179829878263476;0.57995721773418418277;-3.0645060846874074834;-1.3989443274328541289;2.9978566152850461002;0.57035669404764666179];
IW1_1 = [-9.9532926800488414898 -4.0152586033487018824 -12.008983453552518839 0.58721199159401893386 -1.2222513028453865225 1.5950033814630979467 -3.8784244954975557462 -4.1964940256596285906 10.321992646422918583 0.328847692388573698 13.418588672965338304 -3.5609308772131167409 0.45643232636689912152 -4.809497622885585244 5.7057703722696393456 14.022617162857290651 -1.6746371917662190576 -13.664661361079588175 -7.5240152347626150231 5.9008100891582593306 5.600220483863397547 -4.1930557845459057731 3.0881413347071946518 6.9087389284985558646 0.069947496602056527526 -10.647119461412348329 -7.4226688167198435764 2.3718949184678117525 3.4774391655334051521 -3.5375674603853766165 6.1247452254201553146 0.523510153351341323;31.640406255138124436 -4.7504966116366507123 -2.8527181075151260004 -6.9511472566438650134 7.0031733466119012732 -6.4450580628789211346 -19.087741583208600815 5.0933171131574193069 -12.410574379475326268 10.449303237155939783 -10.107607754958104707 6.9608391604730330826 -14.027154575207028131 -8.1371716433773020327 13.935693081775848867 2.1699957261149522836 7.1832670348465326171 1.5818336102902654794 2.8633744465079176145 -0.22528298190399093093 -4.2584338787243876112 -0.4070766300266400739 5.8747983131215972818 2.0955444796122044693 -9.3227705114705017309 -1.7332298255586116031 6.772287589047007117 -2.8109432420056594815 0.44885172691192842809 3.7239612736575233853 -1.6126858916988868753 -1.7675605288116453817;-9.9313550856440091508 -3.7328642734728165742 -11.086436461665092779 0.31951626864367183023 -1.6088050298660860893 -0.6634922338161148847 -5.501702361382812434 -2.6097549134609523414 9.8101645742583922782 -1.1887239555018804804 15.357572381443688414 -1.7800586247267269346 5.2787939809685742176 -2.8220330929106292039 0.82439261972993593819 10.899207993640427361 -7.6622939113458183868 -13.816487982109743271 -10.213139851601466646 7.0102597761546716626 15.127965648600589788 -8.0842659302111297137 -5.7469957764045451754 12.104187755387696868 9.1303227915305829043 -13.592596200482182311 -6.6615342292044097405 3.8248182939384318679 1.4452221669773159807 -5.7326391772098705957 6.6089934539008332592 1.8960422146432902579;-14.118216038179786764 4.6554113688056819598 7.8121877515387971869 0.50803747669204968318 -5.5614983468756307161 1.8015147764825056864 11.848452084888998925 -2.601706376132807641 -1.1769468818304504865 -2.4516914753507550451 1.1203437677633745206 0.067324723815237103031 0.82130082350354749465 0.10826796089449662597 -1.6101800736581406426 -0.91749965484017181883 1.4365152854448703934 -0.073532529201968233057 0.33966164161611778205 0.10474050923313817096 0.21051215413110963004 -0.47823636222197785095 1.0310834380477700289 0.12581975996011082741 1.3722172804950796277 -0.28514882252117523809 0.058805945796725482555 0.21500558272018027717 0.09764222346666011354 0.74025489880787531671 -3.9365829687775142354 -0.92823285213684247896;1.3021829313344410739 -0.30674303241559358613 8.0933151118591020179 -2.2905929551155659318 -2.4565420667681179268 0.60656840680610368821 -0.15590504032604776685 0.87737989565506280254 -0.98009001932377570743 -1.5995345348303422472 -2.2883096126988275998 0.37971868261777014242 1.0856105409923610949 -0.3249319317265937368 -3.6835391881258661151 -1.4834396750878686699 1.9674639690522639501 0.82606347653977052481 4.4424233669046619966 -0.62169504787344953556 -0.31793123673221973524 -0.56337107414586073961 0.10471099695207372604 0.21323534827665607816 2.2260714239220353861 0.33528040492386507188 -2.1021760708310250898 0.66275037808675107964 -2.3250569951032948879 -0.57322527593812078184 -2.934252162944403608 -0.09978985704287908487;-30.819890513606647886 17.380650073321490368 -22.575707112089382633 8.232043299444290696 8.6520255598782558337 -0.63899778520380867697 26.209539447524424105 -5.224272688565375411 16.352233045944391421 -3.9988553099917472089 10.508191384820397829 -7.8198852484289673725 23.884800274114262209 -9.310135786717635753 8.9005779184656059755 1.3284065724380009765 -19.099714959832617467 0.079539071557195334394 -22.820723148255833479 1.7683171670175383827 0.2586334348483417811 0.48006917775194185571 0.097319059398652055237 0.19560288994191066259 -0.27661634082763847386 -0.734754263887086978 0.89889427133815591464 0.51164131000238632918 -0.35655209372617574504 0.52047614433174771431 -0.74714016782560621621 -1.0454283177799674753;-2.3025748472806899514 0.16471034195572695213 -5.1629878236845874184 1.7625560498295755885 2.143775693527020465 -0.54847674468754736843 -0.13328756776921124594 -0.87431605201226303414 0.5127906186235929864 1.9498292471370075596 2.2096490613287929072 -0.58626577058803308606 -1.4582831392876507426 0.30613569982648458634 3.5405875269150608453 1.8279054147138884545 -2.7111366400212957295 -0.74175804608047302136 -4.4258332988221038562 0.57610127688172885208 0.57338612287436585557 0.58133366898999982997 -0.1098599346102184654 -0.23167869112219494077 -2.0760540514558196712 -0.32959727725892268291 1.7494044531634513895 -0.69891768343049565093 2.6838995637038900455 0.57089065542749273252 3.0604183656103107758 0.17007902988470771644;-12.604963344337395625 5.0637048190354061461 3.5618123621612354235 1.2466587489123617249 -4.8483901214376095012 1.6888315937420033119 12.953515427469314503 -2.6813759753349284409 -0.54885635516688235924 -3.2356619809800584164 1.079704902688253032 0.28912130293424020966 1.4754660051100900731 0.042028505192158102655 -1.9957819821309088493 -1.4106005125973910541 2.1617350621687334566 -0.058672249099469490907 -0.12848197472198677471 0.24110241263229659214 -0.018188366422530327648 -0.49085515498922510647 1.311490169719933041 0.13503785329866418996 1.3613411824651351356 -0.29378492165803676839 0.75306930078829159569 0.27711317971487692269 -0.54223534255093386314 0.76378505739611968206 -4.2381566969279713675 -1.0763625647791281725];

% Layer 2
b2 = -0.92490491971042965158;
LW2_1 = [-6.658190880120330668 0.81436045695906089659 6.7561093871083235385 4.0689196867040031691 -6.4352204412428335445 0.8535375523753405691 -6.6082158376178155024 -4.1023208251607252706];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+15,17)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]-1,17)+1),32,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 16);
xits = finalxts(finalxts<=16);
xts = finalxts(finalxts>16)-16;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
