function [y1,xf1] = nio_d16n2_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:03:21.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x16 matrix, initial 16 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x16 matrix, final 16 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.0016362062858721530649;-3.6029461593601084246];
IW1_1 = [37.971588079426943807 -14.768110553629865578 14.78933704639732305 -4.6485067862360835989 -11.048069643083136882 -2.8602703635122641579 -8.4246583797793377357 1.9572385670514218514 -3.5554135020490162944 4.3728470227735405373 -19.86912394520873093 10.857619099709259203 -33.413147135653261444 6.3034443626463598775 -2.6674200244197008303 -0.79248885688054981902 29.116618797443305056 -4.3460417040850094494 0.34488294489807913568 1.3888310936802930051 -1.3599023484976378029 0.034622949049180382075 0.31807007470166515084 -0.30461571916391161352 -0.3987852193571940207 0.61980458698229556891 -0.33982724993057900065 -0.68518957581060535578 -0.66641203135982207684 -0.028137091161083392643 1.1290501246354038845 0.2930307414874790406;-19.184124921299893884 3.3926537136063750211 0.34730592715253733038 1.136371620842707264 -3.2876707022626034949 7.6055848006648272275 1.4006424843971787553 -1.6265543257116175102 0.030552029413493206333 -2.7016033490304298681 11.78568365092448289 -10.307816144580574047 22.745373233288454173 2.0270749720495002677 -9.9970189247265537347 0.13123757114588424644 -4.4300399200676601197 2.3737908661045632464 -3.5402897217965132448 -0.82798053273634109051 2.9086890369074622775 -0.090851581043393331294 -4.0197592753341107041 -1.2065027658226294971 3.0996551065744331055 -0.43602180375267829415 -0.74476910610179880567 1.3244451385066833282 0.74527834986986840615 -0.64977981858909827917 0.26274652627988981379 0.44884910795308446962];

% Layer 2
b2 = -0.99051474777586168141;
LW2_1 = [-0.87161081914609606081 -0.86763307594310667969];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+15,17)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]-1,17)+1),32,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 16);
xits = finalxts(finalxts<=16);
xts = finalxts(finalxts>16)-16;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
