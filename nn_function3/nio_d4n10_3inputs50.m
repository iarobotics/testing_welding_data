function [y1,xf1] = nio_d4n10_3inputs50(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%delay 4, 3 inputs targetting rupture of 10 
% Auto-generated by MATLAB, 10-May-2019 22:43:17.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x4 matrix, initial 4 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x4 matrix, final 4 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [17.760147639343777826;2.6999173430564655796;15.973243103406238319;-5.0121908375143044978;-14.34002878571075712;-5.0720877412534930428;-3.5908657335792213416;1.5981403737975397039;2.4837119620371161943;22.54279949869026467];
IW1_1 = [-10.761950114857210536 19.260397742982949154 -4.0801627608577621942 -8.3805068626732168724 0.45960848195811088157 -0.4074396966618262228 -5.4975444378305509119 -2.8577641518138117149 2.5364298126857485194 21.838127859837797473 -1.4681380043536176316 -2.661638523661396416;39.961207619352890674 -25.680297642192506657 -6.1239886594787575902 -38.47142694580823985 25.7378648805721717 -0.67368607205622377254 1.3899211853794879445 -7.2124365511938650641 -0.790224914945173329 -2.9507027306577988668 3.6285555874046213631 1.4212745889702296243;37.914152277499304944 -77.715346616484765718 -23.086606086282230876 37.48140762733316933 -8.4009325362449516206 -16.402681815849774694 -1.1391131612618816682 5.3700377136164378911 -6.7649626095525894343 -70.462688076505244794 58.176604149969733726 12.265663943741472508;2.9498746595179645702 10.261430834724926342 2.0872014758852164285 11.487282630678237183 -3.2930727142106093197 3.0485562756175523802 -6.5523709083891956695 6.2099832238985310795 -2.4552750832988783358 -3.7569205978109780908 -16.025065784020789295 0.0057423802745310420503;-1.992528712668075741 -6.0497066379965032112 -0.45542101306889054557 21.136145630222685554 -11.783205905211849185 -0.88290116861533629589 1.7870242626568679789 1.8419439705376283722 -3.4867403372549281571 -14.083748516167027276 -6.6697596690438487599 -0.68515184084670777143;-2.1355959787243263825 -6.0244334158454311279 -0.45393153913973161018 21.227416769420742071 -11.919541982951384895 8.4157653257148918868 1.8989390158887955451 2.0586083523775950965 -3.4987692988273884076 -14.146322508899244141 -6.8039976946320868123 -0.68702693691328697856;-11.406017098914510655 19.257948804971452006 4.9181639990376488925 5.8901003346400484517 -10.189860083772627419 5.3374276433513374585 1.5628958573757303352 -7.3265793236151921519 0.91778175608215573078 8.5798897288117270676 9.4816283456703907007 0.2056680802083149795;46.896568254019420863 -25.162898338230018425 -5.8752832631923910256 -27.406770341702227256 17.911044330205946551 -1.2645422856992012406 -3.6559511520056977574 1.4682634605688877905 -4.738286004251357042 -12.167653526036341205 -6.353157997571309501 3.5272140018794591043;-5.6721812068611168201 -5.8293266592034234108 -0.42889435235078882114 24.778597435615356659 -14.344932773542904414 -18.578280663584568089 3.2997598707696043085 2.0170318026942073431 -3.5357195595544723687 -15.696100472159574934 -5.4382833436598891907 -0.65083556411683229914;-14.047879166328137046 29.013256722945119037 -1.3379098607118875552 -19.621538523881959293 4.0173634843396177629 -0.63794490539365444892 -5.7674033046113448719 -8.616859233955882047 0.98994886076947397058 34.132887095268749533 -0.0066796568474189743636 -1.0726997607135628776];

% Layer 2
b2 = 3.1372311631986713465;
LW2_1 = [-1.577508354660088763 -0.5043136936625083333 -0.56321733902539428129 -0.3482462935003687865 4.090138135071882175 -4.0915136613042975 0.20870424006193691313 0.97521849468328491994 -4.0955693694875083821 1.4872563240212846036];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+3,5)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4]-1,5)+1),12,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 4);
xits = finalxts(finalxts<=4);
xts = finalxts(finalxts>4)-4;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
