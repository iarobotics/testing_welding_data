function [y1,xf1] = full_d10n2_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-May-2019 23:00:20.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-41.335166055940504748;17.56894465542341166];
IW1_1 = [-80.35296141513330781 59.986494038163236553 25.678074770863933196 -42.049638604138976916 25.448108373262972037 7.50678134286667742 17.712144666971294527 10.484777448186274995 5.4232343612569895441 51.369762204877702061 -10.496585063917549974 3.2741098624163806896 24.40403295837017339 -17.791291699987464625 0.74278455877433502419 30.815718048497849679 -34.113045275450765814 -8.8855852602295506415 66.411434111977300176 -45.891451754933918039 -4.3884430075576039698 35.820500832360927745 4.200925777752027912 16.02177371186409971 -40.367507167113075184 12.351040284565268479 -0.51578507615193991409 -66.041590421556350066 2.1197715899707980647 -0.46487408712055799942;47.10528741933650565 -26.006035729237165555 -11.707246961847468825 -17.568965785529410795 -15.472223555445300036 -2.9384251143133792716 9.0704625720023770441 -18.817547040672788938 -0.35463147740622014137 -29.996726115011387748 27.136081736745946813 1.2187526371879535692 -30.264824982077048077 22.864283248720184361 0.90643943347209221528 -17.688272324980907513 23.653641976096661637 4.8272777486793438939 -11.237147073915556561 -8.6968624418814286514 0.029713357021777648398 13.237630784938781758 -3.5443648265594296376 -7.4376108545898826918 28.456903025657229733 -3.7118971220637040354 0.10418588459673588931 11.636511643452720932 -1.0125607872134683163 -0.19996335026651565481];

% Layer 2
b2 = -0.96156470758309409153;
LW2_1 = [0.87856494971183529685 0.83987273456591138299];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),30,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
