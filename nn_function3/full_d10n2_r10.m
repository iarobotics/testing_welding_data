function [y1,xf1] = full_d10n2_r10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%fulldata
% Auto-generated by MATLAB, 14-May-2019 22:02:35.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [24.375589266933278765;5.470665823756567292];
IW1_1 = [73.7287047961322628 -55.254351741562253153 -24.663095037108480057 42.440845694732310278 -22.947063383875573095 -15.632221716416555779 -2.7321216416496234558 -13.590693744766825901 -15.731667896254393213 -35.465216541344041445 7.9185972980959622447 1.9270049178558190661 -27.691476695151923337 13.509230383343435733 3.6591737961501711318 -23.640586918431079511 20.132265069818753744 4.0089213508667649322 -58.356675148395446229 36.332642570244239266 0.015534831480289251759 -31.231395535378968731 -1.0791697926763954563 0.57129549317533423469 17.590052983583237989 -8.137630901096970959 0.72615252067197189056 50.971266030810582492 -1.5859215149484340301 0.56994254696504254021;58.075279426076257039 -21.53590758931522231 -6.2468174651200971681 -34.745681843147877998 16.021483957887987515 -0.76506768249205903132 -9.5763280806694304204 -21.4018911876692286 -1.888543551366967499 -3.5850657233973546312 5.1767936709096114001 -4.0309919788108690142 1.9972623513495588732 2.8358175843995883092 0.67712043462851667641 -9.2839046660150206236 9.0939318699525735212 0.44264606543221124424 -24.230059717025067556 -2.0403858632828528741 -0.44028776186890239419 10.870164004419020642 1.0180195517894146118 -0.041967400169396054666 7.0217194585665323459 -1.8987845489180492642 1.080222034296849376 6.9414717989468295301 -0.20295219224318605811 -0.88727857152250522166];

% Layer 2
b2 = -0.98370492452502911185;
LW2_1 = [-0.90789379778558665368 0.89302422387740820753];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),30,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
