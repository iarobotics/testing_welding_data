function [y1,xf1] = nio_d16n4_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:18:19.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x16 matrix, initial 16 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x16 matrix, final 16 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-2.8293732590111795311;1.5981936077797986862;-4.940280584827291932;-1.9218498853013388228];
IW1_1 = [-38.233994402474593244 18.426583165116401375 -20.236486206833514956 10.419188992352459877 -2.6045727705498658011 2.8449266605072263125 22.361484384672117187 -5.1655297630549572574 29.94348374132118451 -7.7383353937811829582 19.719212649677274385 -7.8222224787376939403 28.522860556408677013 -9.9670471825257109799 9.0914551464220760835 -4.034237779883770969 -7.3595264503334032469 0.12447085107354941003 -19.081795291349106236 2.186956983769132723 -19.414321620910548916 1.5567374843236525539 -2.8510127456286520342 -0.13787258545136982235 -0.1910313249442126271 -0.5417537334228313961 1.2799899672459047473 0.34514749607235156725 0.58290830018400308088 0.96671582158059099488 -1.8812947790583391949 -1.3781960513916997613;-10.029233436856699768 1.8709870260327636782 -17.355272952797289321 1.2764078871314772368 12.174399932028833859 4.2897505506349444815 0.058018150005314031437 -3.7876906274992991897 -4.1515162811543628862 -4.6899782621095775781 11.393539361940032251 3.6177837240020873644 7.505383201697326534 -1.5350860031938089456 0.39494494004465863224 -2.3063808393562141852 2.4520350900718415055 -0.0059333588212223458899 -0.24103148715417341275 -1.5328964127846884669 4.0951794748682939229 3.2522252488934482173 -4.8123476257133708245 -0.96191209087290663327 -16.768594962021918349 -2.7929330788231738758 14.853267407798130151 0.84021311415158472791 0.76979603073952174164 0.86735542233783702315 -0.73262506162447915692 -1.243814642776831958;-23.671437912945144433 3.7203490545239330523 -2.0626467580090777076 5.7949102159611030061 -1.8685120000550892172 5.2586596100071023585 5.6522979599042590948 -1.895521518659736282 18.405847714608430721 -1.9312382645927712588 5.783623985501350262 -11.750261841103682769 22.769734631908580269 0.79665004639442060785 -2.9547089792438483435 -0.11744394755017247001 -8.515243123731234931 -0.21792290316503709624 -12.790808382119587705 1.1899257318656331073 -4.184382153838272167 -0.62909791498432321433 -0.55087464871651126153 -2.0723181954309382036 5.1839687507193179528 1.3726916846537957628 -1.1804947840266917236 3.0064584419683226812 -1.0851603018517803623 -2.0810125055192192356 -0.46749980268926227822 0.6328951384190447671;11.857434720963787811 -2.6538500906634716614 17.053115375052044556 -1.0454323508723821767 -12.913141749356970678 -4.3072277978360435924 -0.67423241181097504082 3.8563384839639560653 4.2744811191345002399 4.7593678030576507254 -11.407700455482160606 -3.6804589386068222723 -7.5861106786664951329 1.5629845718245225505 -0.30660701038189247525 2.367018411835582814 -2.5175726792687727063 -0.058369617153790832875 0.1690023085243998191 1.5558126615428520267 -4.1787726881269264823 -3.2777145681848658398 4.9022852278335600218 0.87818709078740331275 16.730168269458825847 2.907572621409299618 -14.707856628380149289 -0.85215644062500495171 -0.78811647603152856778 -0.87536976938256938485 0.69952547891964045323 1.269160397220590486];

% Layer 2
b2 = -0.9668786943124046962;
LW2_1 = [0.8955648262467070797 -5.2448179097750440292 -0.88631879932580281967 -5.2167261232417301287];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+15,17)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]-1,17)+1),32,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 16);
xits = finalxts(finalxts<=16);
xts = finalxts(finalxts>16)-16;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
