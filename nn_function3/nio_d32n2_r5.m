function [y1,xf1] = nio_d32n2_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:06:41.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x32 matrix, initial 32 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x32 matrix, final 32 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-0.43430307445558324897;-4.1587268919062498895];
IW1_1 = [32.96405018545208776 -17.370691592080859778 22.30847214472458262 -4.415206033702679278 1.6314335288115853206 2.0095463911858448824 -9.4169683147037446247 7.1606344401560431123 -20.74875342313047355 8.1284184363589488953 -14.077901425505684685 1.2325964966161266911 -1.9826312264495737914 0.71680430333561095946 -3.9779569659964506556 -1.2400870791386637837 -1.5147146977160670378 0.43929448734929404941 -1.7038961305290116766 -0.052819037862442713704 -0.40476902393398028757 0.62937901034583387805 -0.10404106754925775136 -0.80976520622553316286 -1.0609200611107674206 1.0762743052185279602 -0.26100020701895104702 -0.34764492156509962939 1.0897760435070980023 -0.45552751591435342027 -0.43342020195584124442 0.19726470762092018774 1.1031546401805545354 0.22278805222113920448 0.81597722627837210307 -0.15522501635468005654 -0.66856198148616119425 -0.058795358269343768465 1.046952853208533929 -0.81520212762163357656 0.029686476792775001732 -0.038141710209484751271 1.4972358617350798315 3.1798160332818481422 -1.1826205486541729872 0.39115294464479211101 -0.94744496949755352411 -0.86250934407621127065 -1.1538666192074424899 -1.4372966964112436905 0.69584353275152832641 1.0326624629122032051 0.19135237647982519804 -0.12553144833956758619 -0.26850338512495647292 0.17382631581147128808 0.099121550621059761887 0.045387845172057302012 0.1236746300719594599 -0.14809331975269221515 -0.97447742058262154519 0.7377520188081138075 -0.57096797880186855867 -1.1797560309185397553;-25.678312192035321004 3.3043546224113184984 -2.7315035676701131528 6.5505035058929168557 -5.2341238721591896166 1.9698271195643342057 -3.0100631586488471036 -4.5654810765154456575 13.256036178003592241 -8.3223686244996333272 13.595987861002996056 -0.4451618853723530167 1.5032384945266898946 2.5349920752405461499 2.4635811795264959123 1.2042780397585861607 -0.33923166984827241022 0.55674849645812263255 0.61348618313305802729 -1.4859504949400454965 0.75199190458091469402 -0.2070495332338863903 -0.82230471496719226288 -1.4818808954790461119 1.7215037634556344948 -0.49442313439927171315 0.25979344269671467149 3.3618974024620089658 -0.21632818149570376409 -1.572100314738171134 -2.1153086145452140165 -0.5914380132069572138 3.6264781597178452621 0.33290227562717877863 -3.0203359714485777943 -1.6309708331576175944 2.8697277570798833679 1.534947730973927893 -0.05649641138205726415 0.34352046000182623331 0.83400058779594021807 1.3905351138391208732 -0.45981536439991288479 -0.03427014236744735376 2.3998506367177130372 -1.1874161135863603445 -4.2714318371287403053 1.8954496030613974256 1.2161713776389864172 0.113393963658760491 -4.629702454284386981 -1.6727956601743318998 1.754606924126622447 -1.073128694532514249 1.1279334027155207831 1.2922627450200461219 -1.8213428779505003163 -1.7987604555623064595 2.2261728187747191754 0.57151480155467460076 3.3874297559703658855 0.59144011593797840565 -1.218712315035864302 -0.045695163151411775926];

% Layer 2
b2 = -0.98537530581181198563;
LW2_1 = [-0.87315255600954833071 -0.86334549628348367101];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+31,33)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]-1,33)+1),64,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 32);
xits = finalxts(finalxts<=32);
xts = finalxts(finalxts>32)-32;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
