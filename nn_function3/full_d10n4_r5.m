function [y1,xf1] = full_d10n4_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-May-2019 23:03:26.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.2006526535585173576;-3.1418233261416670388;-0.72576092464331543042;6.8786056153741679253];
IW1_1 = [2.9134762438431751619 -1.9870274509301513177 1.3090172586164232627 -3.2967613449113546409 0.63673343718943775649 0.31085457513821845854 -1.2508876970183639976 0.13349762878178653147 -0.031530993991442171631 0.77041958806390409276 1.1225557306023516979 0.19426732798410489833 -1.5413211480199393577 0.93281198378808516392 0.77671936858074619447 -3.2036685055141438383 2.2228821390755721943 0.7237854873965520186 -3.9237304854890400208 1.5534493723469509074 0.38179076263484967857 1.6099371926814236566 -1.1277689639612533679 0.39194202067694494662 3.6650943390136472289 -0.83095012668028145342 0.15976955095401743079 2.5831997653449576546 -0.38886585826682962264 -0.14013844909936226668;-10.966271022946788349 8.8214754002120976395 3.4671557161376713729 -1.2100449780623749874 1.9364187155959664555 1.1834599620334571579 0.66951874728154747718 -0.73030189559738112326 0.69805202460985738 1.9576553609425320079 -2.5552095955732765376 0.49699666457945684828 2.2718791160885323244 -0.35239231542329446656 0.15958306862246171565 0.66397566049740275318 1.0059902721138533899 -0.023434954304764256394 -1.459458435718479441 0.38953068366003579248 1.2164813462026069502 -0.16385700253925530867 -1.8590542228401640834 0.73109472596396141153 1.5572132776606570914 -1.2244878286657709943 0.14959225968880432434 4.2710680966099667799 0.69760424900865725117 -0.22518172032255684423;-0.13859941812060191935 -0.21805985032480718067 0.65708693210891533365 -0.37610817779305277808 0.06452895463350524774 0.40106019052293417904 0.00072518850809395740686 -0.2984153106324282656 0.49858937029802707919 0.30891510683819384253 0.24674031702168913727 0.18409065698826654334 -0.27464602138505966877 0.28585647346230202981 0.67935363152284367061 0.38095545518954693209 0.42917076455893476972 0.14276219588947711148 0.22670306237761106427 -0.26774214339321189549 0.25720001341607290346 -0.31735305446703643284 0.34788251474429299215 0.33819402126009634468 -0.15222157606937597452 -0.11359677076674982998 0.11219074015924979104 -0.25021118468652342459 -0.26765182786677421678 0.065896695743848876514;22.681069939264006052 -17.64642819151778852 -6.2404095966077690605 2.2145916791411264235 -2.8664873026246908694 -1.9953591841073368141 -3.4189067102879278082 1.5294045833212370766 -1.1151269199036113466 -5.2634785374965993299 4.3862922908579218273 -0.87648738778856116749 -5.1204554284674159703 1.5972272442797177394 -0.39458435754557374953 -3.5025312058738737875 0.50029741073828226661 -0.10336910731200164848 -3.7986386646060790184 2.2201720654526493348 -1.9367107402145011807 -0.50588056177587503726 2.220497799213705381 -0.8370484937408408932 1.4000171826926064433 1.130965683750231987 -0.13856165096619016408 -1.8662671703230806486 -1.4263077782272879368 0.2851072635393825383];

% Layer 2
b2 = 1.3821274799314611226;
LW2_1 = [2.5770433698133738964 -3.9485023583894078847 0.014693064948628870373 -3.7389512552015835567];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),30,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
