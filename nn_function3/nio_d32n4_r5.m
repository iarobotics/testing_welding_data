function [y1,xf1] = nio_d32n4_r5(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 23:14:11.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x32 matrix, initial 32 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x32 matrix, final 32 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2];
x1_step2.xoffset = [1361;56];
x1_step2.gain = [0.00110741971207087;0.0176991150442478];
x1_step2.ymin = -1;

% Layer 1
b1 = [-4.2888560451526611672;-9.0109545275745350779;4.0993885541186152466;3.1440275473984771182];
IW1_1 = [55.574735912382905667 -26.458248844760912988 34.907628146162032579 1.7291496888991728653 -9.6874748445311507083 -6.7389538884207791369 -19.428419553557947808 6.9675309287604623165 -24.73215133718938219 13.199279618380710843 -22.202144984912443704 7.866657818028197191 -6.6971838565523267306 -7.2231207892062734288 -2.3343958391806203245 -2.8955733954475477709 2.0049201625030734775 2.474255781022240086 0.20118505674772943492 0.6590479970470980442 -2.4346132897468502065 -0.034689109758392761007 0.052249474752753745366 -1.1983917965740678024 0.99696662562824911458 0.89825799331095701472 -2.4310307009223923735 -2.1381613345167167495 2.8255354206280132168 0.24403538186184900449 -0.23405509395438292564 1.5070477076826764851 0.32827436242588903248 -1.7572362023667167374 1.5984308166321847811 0.19316838551502768517 0.20317433524881331475 -0.6404584450216681546 -1.2122397049165440919 -0.29487872886799426642 2.494351453687193132 1.5967937917525074631 -0.38114653251326879868 2.1705795122688753551 -1.1724425552807151707 -2.6029664367861640173 0.59887024548923661893 1.6304396605319795288 -2.8187859650201301243 -2.2152203940109593816 2.8725661188355555709 -0.39860487325765325828 0.67357759816180140522 4.1610754339228064325 -0.82902611638933998428 1.3249299217380834381 0.45703954733925861165 -1.4716224123110102084 -0.85221609128863384797 3.2493519428384050052 -2.8574231204136331108 -3.091402616861482322 -0.23481650666382433701 0.010020694840775465004;49.036821210138668903 13.820092624209642906 15.989805499169591485 2.0326927620133790064 0.60227451486161642791 -0.056155315914083021867 0.10375741350220023251 -1.6207097466505371308 -3.9667910842498321777 5.4536889938847510351 -10.773436688912823911 1.3911467292535881768 -43.754681348460962909 6.0562833887987057579 4.5287994689505319812 -2.3960800136065780741 -8.2555396380252457078 9.1010080683102554389 4.9028693885697389732 4.198941927383366135 -16.421090534952377027 -0.46536477488294714089 -12.419391804953216152 -2.1585466892072804335 18.862070842743836607 1.8686457673072967012 3.2182724739028372163 -23.79801666242627789 -6.6353086808425141285 27.840524959141205841 16.326613247660219486 -13.610612989866938349 4.9421999742530609012 13.560724777007081343 -1.012791059597261567 -3.141667918889315736 -17.935474320880874899 -0.68484558470679146591 -10.955943770319173325 -2.2570620081174159743 -3.9289261913824948813 6.5080922830974046178 -7.4308213374981786359 -21.614721929104966591 9.9261282920055062817 -9.4182955104027872295 9.8409451872897690805 -5.8987677042312443021 7.1753088574401502342 15.422810090947404404 -0.65644530255198840774 -9.2900946814667300089 1.7116669251401261942 14.355477600636620039 0.31270047279944090945 -10.51754071582267791 8.7543970130233841331 8.6090241156625744168 -16.086927854927619563 -0.054995438213938742378 11.293144167842402936 4.1264276032506854719 -6.6908690677144058157 -5.2590513695474916389;50.472963868402715093 -14.95610019250722722 15.956471766328570894 -17.834485361848290808 8.7534061346280687133 -0.92492563640255620605 2.8691551158207091454 1.7109147561327204823 -31.023561928309028701 7.4491428579418839107 -20.355914475533289476 6.8311539832490772994 -52.218718957908855316 22.553718400098624386 -12.133275729229730189 1.2339599804806911099 15.274898622839822693 -0.77639390683033626672 25.788985773164018411 -2.0101110458405107018 -1.005430546132266123 -0.78512039343797423996 0.97949764779835446493 0.43772527038967751212 -3.6984473438399030343 2.687423888092875135 1.0527200835345025265 -1.1188478866847701987 -0.72935442868574262842 -0.73135341324572544774 -2.6341493143170917612 1.0049487342994933847 3.558701146080291533 1.2449859970264498532 -0.89010282813728813789 -0.67601656777065666226 0.90008921583053236315 0.59783582781751143376 0.67691699274807226594 0.043922617349729471681 -0.58785345526091903334 -1.6611133436576184241 0.22008838037091160711 0.87425862682513966195 0.87580760949285496597 1.2666832682708422109 -0.014943471781632584883 -0.23851919895791165449 -1.1301973847840025567 -0.03654143652788711949 -1.2984134443337047582 -0.44894537739220141681 0.21506913052346268711 -1.0875711868919988312 0.60945482236071624182 -2.0675655789849156641 0.81385997759319528289 2.3704119982232474406 2.270913303203901723 -0.94472759798824512689 -1.8408869096565430024 2.3217925037700757329 -1.694766867843735092 -2.9276547258221263803;21.131073604830881152 -3.8550132671578212218 -8.5999920258288007346 -1.8192398492767474227 5.9544027197118181149 -5.4853003814419141193 6.0616063676405325111 1.2859559124565953514 -9.1402784382400881213 1.6044871656776638069 -5.6366708296479979268 3.143453706444887974 -14.505852115484589859 0.77082269222176913459 -0.13491482420023287458 1.2375952808897834334 1.3910364935076824366 2.6261761317354084255 8.5982744544116034291 -2.6017533467903262157 -0.80724140599022498055 -0.32220263402466525759 0.52208647156213294771 0.63827325068108919925 -1.6004177759604865106 -0.46795032281480292147 0.71711585262455723733 1.7782994291020026711 0.91625707860296401464 -2.1987635839382360103 -0.81708568933820735491 2.3435873178175934406 -5.0433705861791633396 -1.8356485110637736913 2.4759637154255473845 2.3609614919310493164 0.8160886160382684329 -2.246311714139397786 -0.84447062862109900649 -0.28434061157545598153 0.23558683689268145045 -0.80683680718619876782 2.3942232853899061418 0.84634080143432299792 -2.2195860242035614363 -0.35415877828994085652 2.3325744261578313932 -0.86538426858173267409 -1.6746401221456110875 0.78391922574560612968 3.2580283841687238677 0.035582913543150657132 0.018800584432238927335 0.55144273975302615654 -2.0347461613320070306 -0.28243382967886399015 0.33303269336983160054 0.82875202417625859486 1.9933927802147004549 0.0024389597192287682144 -0.93163117668505179836 -0.098593988507440832869 -3.1942061735546851686 0.2896493078923256248];

% Layer 2
b2 = -0.42487984263286865394;
LW2_1 = [-0.31735868987696475019 0.56402749620789849327 -0.62468846585295423335 0.9342731460574067448];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = removeconstantrows_apply(xi1,x1_step1);
xd1 = mapminmax_apply(xd1,x1_step2);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+31,33)+1;
    
    % Input 1
    temp = removeconstantrows_apply(x1(:,ts),x1_step1);
    xd1(:,xdts) = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]-1,33)+1),64,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 32);
xits = finalxts(finalxts<=32);
xts = finalxts(finalxts>32)-32;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
