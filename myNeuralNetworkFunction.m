function [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-May-2019 20:16:45.
% 
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [-2.449531105213622606;0.1962009459233824693;-2.1293385108813653872;3.6562861176800383056;-2.9412615293823272111;-7.3767415326737122427;2.6508660460018300675;-6.493211012783677738;-9.0312909091420703334;5.4311756982072516564];
IW1_1 = [-23.140537857262376775 0.40145026561133001497 2.1104641633933378664 20.516647646194705601 4.6444253585268846507 1.7511729714732151564;-0.026424422066777180501 0.0038706555328443400209 0.76253291308664183923 0.025834350101965063845 -0.0025640071867232172749 -1.0393726251293773366;-12.473622097840966205 15.829140118385659264 3.1105294872809379214 8.8226953153327478674 -1.8567606384911243822 2.0537835871349612304;-13.935080052722696564 4.346211531719172072 0.76578996371400243071 13.614005956802566644 -3.5054676192262279599 0.14123315085309301464;13.878076383597136356 -22.378405794212447688 1.5274190546244372779 -8.2574283676552227007 0.71821954150597500099 3.2668486153924432003;16.829586404033708646 -16.864915611859220945 -2.7102198863504018966 -13.619324522647898945 4.4368511792374798475 3.3454143400560236721;16.733864183947339654 -19.532832781790027354 -3.8911087241702846384 -12.528641308015858513 3.4220990727894928796 -3.3930033314916108189;19.692338502766403963 -17.54415854598010327 -2.6518346829282064547 -16.929002923874456599 6.4924441750858825628 2.0016048867853406534;14.971643848013613365 -17.584124504764361063 0.84310521955870787458 -11.112906466999348254 2.801939150704361392 -2.0327339913888038403;-21.551605105591118416 1.6374332855988473767 0.69899684439676934566 18.952314362978899709 4.0071593324025354121 -2.4636423431757639158];
IW1_2 = [0.0096757236495357244743 0.63963836503576654291;1.2163648881340578534 -0.49903700025359060133;2.6285907122481773079 2.7726043037242376066;-0.33805602794415240409 -0.43026222568673994084;1.8685738725446168207 3.571511954261512134;-4.3325565374411123543 3.7148297578512243788;-2.4844957940224263737 -2.2185154364828116869;-1.7721920129571604452 2.4318250243941768041;2.3918881547115939945 -1.3510219885438119469;1.4416982736160517398 -2.4940038971147719948];

% Layer 2
b2 = 5.1382893916715115523;
LW2_1 = [7.5679988305937158088 -18.038057303868360037 16.618640442255895096 9.1720225685994520859 -2.9091705828384424315 -20.700076766886802204 12.819661180633916686 8.5327580901509811895 15.082960965009744925 -8.2418364372035650689];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
