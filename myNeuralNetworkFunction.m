function [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-Apr-2019 18:15:03.
% 
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 2x10 matrix, initial 10 delay states for input #1.
%   xi2 = 1x10 matrix, initial 10 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x10 matrix, final 10 delay states for input #1.
%   xf2 = 1x10 matrix, final 10 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [-85.567133682168787345;-22.718687123938067884;-7.5061547600462263929;7.2542301924432326388;-4.6505289445421942318];
IW1_1 = [131.63872468538818339 -104.53898342711568148 -74.482030896646563178 42.857060718736647686 13.404897222832122594 26.107212064727391976 -68.78847647539889465 -26.793076110194029127 56.919666765285185761 -13.022956843575350661 73.524208443379279743 -1.9535718026335426867 -119.21045690566356257 8.9717438049060405092 -24.929708128497715336 -31.905903041882787363 72.747969074954212942 33.6587246855469715 -40.434137617155570865 -14.716462169162218387;46.465243717929546108 -48.433068444571226507 6.9764746333065144057 27.466781504004735837 1.7327796791731271409 -2.0444904633722447151 1.4690737035237952934 -25.101885389766724899 -5.5334002105432178453 21.986108917841601595 33.445516462013983983 -9.3235452713847184469 -20.223381282334734976 -13.272281957346903525 -28.367315627616633833 -8.1346692252468582041 6.1727329201603771125 1.6304286978235187355 -28.247789047679329855 10.147387236765164076;268.91126851950144783 137.15523730864745744 -179.79328188882749373 -245.8841731877153336 103.80549123231777742 22.054191751547282507 102.83352335181955084 164.20890685192782144 -206.2740180123918492 -87.322766809700240742 50.597773847756180032 -51.458719955812931346 24.415995882224731162 96.040582481596587172 -153.33185477744993364 -112.95868585829531128 30.148676022442678857 -0.95464208187038945841 -37.524740669754088174 68.099821068238782118;-60.861497413079263197 16.89840906898553996 37.008145495349843657 -17.82980134618430057 1.0053742379014778408 24.329358696699337372 12.051881203819348798 -19.487500458966124484 -3.5837989142683994714 1.5002018126798253306 0.5197338900803559758 -2.5291286557112639954 18.930473831318721523 18.557760269671522479 -12.590107244891258986 -12.390340693034941566 1.9795811001757690484 5.5363891505945508342 1.2755413528765944253 -4.7644249941914473823;40.773344594228312587 -16.455160619619526585 -28.292806985187983315 12.909550137436792028 0.18883245867002385054 -8.4709949454817223824 -8.3763681266265717085 5.8399643531997833534 1.6109373089051000072 0.55247305835099502769 0.91655823363378496893 0.29366704769705143097 -14.276639904277198312 -5.4957106964535649141 10.236987546356084877 3.4547907345801145418 -0.81998891549278196678 -0.93800946981261368318 0.48643476637915455951 1.6978547082525803358];
IW1_2 = [-17.606228978377501448 -5.8791068137943085503 2.5556816541728006875 0.32507831933420744397 -5.9351305993161087571 -6.6104382198892386313 -11.382987960115700687 11.025868839529991305 -15.019184597322235319 1.2902793121862707881;9.2422771079815948525 -2.6081565650482643193 -2.4988956361570271447 -3.377144872977695389 14.503757083170027542 0.035347494377165486479 -11.894975433037069834 -0.54060255407220680901 -3.2008128400983859585 1.3287701466688541796;19.86802477783263754 -5.0660005461352630718 -2.7533686837329742758 0.28610818530948783911 33.16545846624153171 1.6008343815469021632 -23.806064744202846128 -1.0858019136367347279 -2.8092245080004150104 6.5721152971111065355;-5.566475037829605732 -0.5274795733879846793 2.0369041748663021529 -2.7260849896745291687 3.8222425195309623902 -0.19132663834451474338 -0.037602738297629466346 2.3298648757361100081 0.1246619249509835492 0.077194055659875915332;1.6220083929773287945 0.76821465898405205674 0.35311872605705652006 -0.55458326150850112413 -0.19750339569870778433 -0.047430240196773200412 0.067153730097977329394 -0.67708991112823013747 0.18909103075605926403 -0.080390645830602597277];

% Layer 2
b2 = 0.53431588875631530478;
LW2_1 = [0.53168280531746281437 -0.58471655270737488141 0.58458221298171364477 0.23074429845754676482 1.2336432300546855689];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

      % Rotating delay state position
      xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),10,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
