function [y1,xf1] = nn_d10_n6(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2019 22:40:10.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   xi1 = 2x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.3121749592533777928;-3.6382938005712754936;3.5896620094771929388;5.0353341624853049652;-4.3098430017480398035;-4.3529908627709996694];
IW1_1 = [-22.918923722229283868 11.090649307781159649 5.7167351911482437998 -2.8125257004602537414 7.4211974144406189779 0.21288727462532799906 0.52116626225558793095 -3.048597845575231613 -0.41764999037572964058 0.074839567606190995908 1.9301907701704910103 2.7749990208267618641 9.7349352370476065488 2.1396600393404523466 -4.7852466838921037251 -1.0646956677010395165 -2.6323624974425405831 -2.1020984756810694449 3.8680160754501979881 0.75860149719389502465;17.524559187719866316 -12.790999610827807231 14.821667782566178673 -10.825643234661724179 13.03867428876840151 -9.1785069811642205906 6.3989612611792034969 -4.6554842426721823045 -4.4359864014501164675 -1.5367566596840256388 -4.8641926096786134437 2.1011014907808984731 -11.727135114534542382 5.9549906786964559302 -12.799215276303483435 5.0627276574241255602 -10.163364164071882811 8.2234697145886279657 -7.4786087686515676509 12.856819461087534151;-18.325636121222217412 12.581134966493561222 -16.050478845176233023 11.039362139617404424 -13.79951508681290484 9.6737202099563184277 -6.901225954973387644 5.0875901366654829872 4.8055134550853608744 1.606224316099098548 5.0167596723781011647 -2.2669476972898232603 12.418992614093493643 -6.4655561593327295355 14.170252709306529582 -4.7615408400161847169 10.545049241797400441 -8.0038711202302899039 7.7087944827257999236 -13.958849028834599437;-22.691684410404715067 9.8181886568596965503 5.0651897445678919496 -2.5653164213272892091 6.9013606591149878611 -0.09288920012120265024 0.2168357722590655845 -2.8141329184616243886 -0.61450489475286473873 0.24979971671135306477 2.0922769729545742656 3.2281715118119334029 9.6070367349197454132 2.1272594448402402101 -3.7601367553400817378 -1.0212917845643103565 -2.1790077466173656262 -2.0488583720875288563 3.971076360702540331 0.42305462510200436688;11.974271162398530066 -9.6211292656948810276 14.617728764745637093 -10.165764669414112831 13.2950021456842844 -8.3446807599223280505 8.7658111965272489385 -5.5064701632825565625 0.21241001416907240307 -1.7221904140930504035 -3.6775090572158375402 1.7138166674358992214 -11.259586960433122016 1.9429821598052285925 -10.496150162048360599 7.3525330881935406779 -10.494500031003259011 7.8125861761322141774 -16.017343416706339099 12.153565894044627171;11.728916327968441635 -9.7309290447703276072 14.675229199957174231 -10.264373083017261479 13.00726689222060628 -8.0282605064628995706 8.1646861371627537096 -5.674667573252941466 0.062067104877733633717 -1.5950295254102311304 -3.780863680570308194 1.6168382412514226143 -11.073462474704403036 1.9744380437808972673 -10.289220161604003323 7.6005702081875128329 -10.462014813260676505 7.762187002121511803 -15.027394633046325723 11.721194114572529799];

% Layer 2
b2 = -1.0815204581006268025;
LW2_1 = [-7.8908669725916844584 9.7925032365401101231 9.3975664567999697141 7.9271159126458163868 5.5127227665804072743 -5.9504293906463621155];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
