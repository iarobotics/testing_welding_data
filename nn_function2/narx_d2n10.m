function [y1,xf1,xf2] = narx_d2n10(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 06-May-2019 21:40:05.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 2x2 matrix, initial 2 delay states for input #1.
%   xi2 = 1x2 matrix, initial 2 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x2 matrix, final 2 delay states for input #1.
%   xf2 = 1x2 matrix, final 2 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 0;
x2_step1.gain = 2;
x2_step1.ymin = -1;

% Layer 1
b1 = [-6.4694323281336885145;3.6651510250865193541;7.3367336788826840177;7.1085617303090371522;-0.56586713183570580554;-2.043227862344209278;7.4316186374798638425;0.29332676724383277556;-2.1164716369118696804;-7.257090393477521495];
IW1_1 = [26.229497653565218229 -32.561125695423214665 -23.272570522008130922 22.041359218499106731;1.2574003205157751051 0.21824708137331860769 -2.6101026856460967096 4.2113550966119168706;-13.168558428313145825 25.739682411637282655 9.8103440307412679289 -14.162796708431203641;-17.932835603983953376 14.029920268502729996 14.22807883555122288 -0.46319365069404971891;14.648781666305962901 -16.987981009501158525 -12.78935209731800704 11.301261084467334683;-3.2264222838225022905 10.014077933723131153 -1.3682626298040863055 5.4764958881482046493;-4.8301451968060140629 8.3230300470006799429 0.31136229910443885549 7.3466929103766949183;2.1509774092713125349 -4.5867293549733458846 -0.47066736285557225772 -0.47644495724878793697;-0.19154373423056808567 0.1800969653253351177 0.18048511133909966864 -0.11934610291491853928;8.6432573612999732404 -9.3781864676728279306 -4.7161246695617187186 -4.5741992081253464164];
IW1_2 = [-4.7148610855855928037 5.4217562223697086665;1.0072023737643811536 1.2311590637300315887;3.6160609393038587456 -4.084284704059292892;-1.6449925285321687074 2.6604974361736002386;3.879566884108173852 -0.62693482037207215463;4.9019101539320537597 5.5532740395676718492;3.0925378180218303648 -3.667576089598007627;1.8938340511609028649 1.7161430602420819636;2.1518090803565699254 0.54646344756058373715;-3.2684096731227785249 2.8987037271503468538];

% Layer 2
b2 = -1.0045204611033895503;
LW2_1 = [1.5043482336545010991 0.019016899606881288581 1.0523437379463396191 -0.95685005751664364837 -0.84005344146880123191 -1.293693128326939723 -1.4373544440746570672 0.59130741696804622887 1.1842915632138424353 -2.4778840910504320583];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),4,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
