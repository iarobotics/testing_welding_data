function [y1,xf1] = nn_d6n10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2019 17:49:29.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   xi1 = 2x6 matrix, initial 6 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x6 matrix, final 6 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Layer 1
b1 = [-11.913717277103970105;12.870309131968410199;-12.80040832269026474;2.9170193611859169813;-5.859473792377331236;7.2505885659240929542;2.9735045947279314937;12.935933952587769014;13.063096920288057134;-13.282759120650968754];
IW1_1 = [6.3208262158689674237 -8.0084383164523949006 -1.4895077299726788844 1.2170441918521928137 -0.8080475398252489061 -0.90315530875879534989 -3.3014649528471351481 2.1178325568315647942 -1.9852051614102110833 0.22259503748000275536 3.0607977844599068007 -7.9528296307010748478;1.6423471635331048368 -5.9895054410185091243 -1.5029714768262874003 -0.0085586157558961428737 -5.5924345995802440257 2.6545400277883319795 -8.0226298082583209492 -1.4614676418047882756 -8.2345817955624553974 -4.9223227496530848057 -8.6939503038624490472 -10.001212821872464076;31.704394932187899059 -19.827440493715446479 0.20196045117058852858 -4.5067158533855629088 -1.1867930479695001367 -2.5189957318463322977 -0.58913877955343896264 5.0905748761081568432 -8.8014728992207924563 4.8768100477099673995 -20.321398834918610987 2.545952174518243627;-8.8166498960855133049 1.0634333476334010271 -0.53448709177679465387 -1.0059452955361887216 3.4062182552943398584 -0.33190126168897937653 -4.6965152650963517544 1.2955683351511297907 0.49452870139092225399 0.38460053474289218611 4.5184753394156498274 -0.3830805302337464413;12.153807861999206708 -13.287727763898319111 1.6615944727790559199 3.0201720517120658194 -6.7702277703433457745 0.39008647031229337632 -0.62859689694625364709 2.9396975527586084453 -0.97837803980121662573 2.084971138747437891 -2.9375933082994807322 -3.46913189665666577;-20.629408707452459026 15.597262856067761305 2.8049148823439393752 -5.0855268030109979094 8.2959374865019714917 0.36499943383192406943 0.89946772943160802072 -3.0554833857330603308 2.0213104695596562088 -0.59356108390513195872 3.7249174418277188892 2.4780696958189203372;-7.3768637285120277625 0.98643714263861559388 -0.29028646059558194104 -1.038335263537167874 2.5132899927205065715 0.079647593233856284201 -4.0855627555030906706 0.91840983179323876229 0.32144156845815863299 0.20122538542425705277 3.0642654442037300377 -0.40340701652437704894;-31.845305645080784984 20.025277919994756815 -0.38052602490504400246 4.4849421996759479825 0.8129050020552628375 2.4818390833760965997 0.53780890535711078915 -4.7331390449806471921 9.0465049947977345113 -4.8789329935432617091 20.922273797551728336 -3.0244998595550862674;0.63118669219565104456 6.0863127642073004964 -4.6941967195864986451 2.8926668513915689829 -0.61227747536677246121 1.9551354114175132359 2.0220725035490545451 -3.0237306260928691337 3.7195844022628623549 -2.1025004210025786122 -3.0349745938396277545 8.8418370262983732033;26.16472198010132999 -15.949979576772571832 -14.515012267895414766 9.6879640663931425593 -3.4416566923830846925 0.91176688213450973741 -6.3193664215890148483 0.30392133633790696656 0.0031655736445247439903 -3.1547476648001984145 -0.087270024068696550046 -6.3957891283778760538];

% Layer 2
b2 = -0.037152167138714206618;
LW2_1 = [20.155250924205883933 -0.89071360184642944802 -14.02484399574904117 -6.3327403929162073837 2.7443915226133714924 2.4927579305638527529 7.0939486769923769671 -13.696367440949535066 13.17160439155228957 -6.072041730193879161];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+5,7)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6]-1,7)+1),12,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 6);
xits = finalxts(finalxts<=6);
xts = finalxts(finalxts>6)-6;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
