function [y1,xf1] = nn_d10_n2_cvs(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 05-May-2019 22:39:41.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 3x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52;0];
x1_step1.gain = [0.000550206327372765;0.0045662100456621;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [40.522482917170819405;85.755567675480648404];
IW1_1 = [74.943377258124300511 -11.435863427330200892 13.113374668550408231 -98.174816444442384977 -48.770470117581922409 -5.4376346848772723064 -3.2119452430379151764 32.412184198833145388 7.3304056500855567791 -3.5668657356031205907 26.365746112662094447 16.222457753663054092 20.320501685732814678 16.867574543934519937 14.63336454684975152 -20.312591915621442951 -24.165096657258288815 0.75464695966519657055 9.6613699059167519323 18.513006343817181687 11.995381778007009999 28.097562188473649059 -41.004428895818548995 -11.846784309542965019 20.307609552592953861 32.61235419724121698 -1.0422103365489181481 -27.812476230573984992 -9.5125400858617119582 0.84899412472496083026;93.517826649369965253 -39.397378227234014503 -24.876432275488422619 65.940592034105392827 -30.397965462585347041 -10.807780649345149371 48.123335324256032663 -39.958356551676345703 -8.9228409350687094559 41.381572284400732542 -26.738763988179872655 -6.2508756509829721537 -2.655642554907584163 -11.967798184694800057 -39.143314740134620422 -18.135446367582044758 -6.0384109542029564821 -30.646513081274644463 -58.466099046308997345 10.679196527099179548 23.623534580688293261 -61.72450714221265855 28.222830553507797902 -14.547846059764967919 -50.945197544574241988 31.325676123388895178 -4.347639473838565749 -57.981733762470547333 60.38666997854120666 7.7568342940511181283];

% Layer 2
b2 = -0.28426287129470034776;
LW2_1 = [0.052672077278403693634 -0.66168482858306409966];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),30,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
