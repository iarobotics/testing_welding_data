function [y1,xf1] = nn_d2n10(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2019 16:38:17.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   xi1 = 2x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Layer 1
b1 = [-18.177828055415087505;-7.3276453582848493085;5.3311415855512080952;6.8045793302592763041;5.9150110960973592;-7.824116435453256635;7.5328046684915355158;6.7567964446200488027;-4.5367936705352356341;4.8031791787516313619];
IW1_1 = [4.0464603929215803291 -4.029932549937880637 5.1466528690199906393 -13.386891361369098519;2.7471310187147155446 -9.9274091787508318419 -2.4044693248726249912 1.1204601637182449725;-10.527445727701994826 9.4818955067960164484 9.2301308806898543224 -2.6482471183646967283;-0.81701837194848270229 10.597625225997875376 2.2351875492810657775 -1.2438652930617617454;-2.5675894778462606816 8.2262760968552832708 4.234626304883753356 -0.93008296188933659021;-0.63976239645020049895 -10.194205630749051394 -1.5835904188242948543 1.0770541161207112246;-2.7782894561695745672 12.374278966004576219 2.9677979974089891968 -1.3096585334058665762;-19.292004752912713883 15.079910153569530351 17.292435524842147743 -6.3842114346489786669;-4.1764563160599399438 -10.192283409193631627 1.3107576687734849852 6.2988249522570116667;2.1249640369753999281 0.11716147379095175063 1.4062273391804547273 -0.59868235304563088839];

% Layer 2
b2 = -1.7058808427609633007;
LW2_1 = [-1.660449965366750158 -6.4391608093864451945 -15.330371989625488638 -5.3870702431669119647 8.4735102851564985116 5.4401876192952540734 3.1086338659064622902 7.9632600816959664414 0.85574601813940842643 0.065569502478167812631];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),4,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
