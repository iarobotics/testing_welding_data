function [y1,xf1] = nn_d10_n4(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-May-2019 22:31:52.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 2xTS matrix, input #1
%   xi1 = 2x10 matrix, initial 10 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 2x10 matrix, final 10 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [588;52];
x1_step1.gain = [0.000550206327372765;0.0045662100456621];
x1_step1.ymin = -1;

% Layer 1
b1 = [-10.644024969018115456;5.9238622477083842099;2.2628110624051394062;-10.849468147064122547];
IW1_1 = [44.758244240474375886 -23.747586298689729034 26.600160953248444429 -14.637528829357416171 15.832117663235857563 -11.027141245737849928 9.1868742595417369756 -4.9711614695332455582 -6.5927579907364100009 0.33522232677714752791 -9.572029253712466712 -0.4660273494972909103 -28.418932453970771945 8.2028506838015164959 -22.982285628589973925 7.0736761031771449026 -13.245108013763253751 7.2215408278609292125 -15.817438561143552178 21.178156254296535366;-28.696351261155868428 12.367997650556453948 12.791815431004469161 19.774226843537260123 2.4987496907211177444 5.6132554283714535259 0.28431437117271329829 -3.0650891439211500611 4.605287109719313321 -4.5771096688302321809 6.017191638476352189 0.71441031794874987337 12.023967002652794278 -6.2692289878602958098 -5.828314387334325275 -8.6924968487508778026 -8.9521207310857171535 -4.9895028516885764347 2.1501683357855432277 0.80410762457223217137;34.849615598731503496 26.672234845723721719 -70.578417049702451891 -18.386102951816969409 19.451101419942190773 -11.193383980843247372 0.77585039313204595679 12.399661369702327463 -7.1540310035339604866 -1.2650298757200360011 -5.7028643126216165271 -10.981124901172256259 11.334485000518359499 9.9166401412231870438 20.506242377641047625 -1.6288357266580864025 21.565806162569856497 4.6947377032145070075 -22.570969208120466476 -14.026572832728451345;45.565983787096421054 -24.207610880243695561 27.290127038978791774 -14.932004527108363234 16.388582441728171801 -11.205756657277634147 9.6701690231526402641 -4.9899023066217749189 -6.7345075958865816546 0.35145032383302166057 -9.574771864717890324 -0.49970253102748418694 -29.019938154171899924 8.2710271300846009979 -23.57558533006515944 7.1393055513575136573 -13.619275070705938901 7.273256167801481098 -16.6953992648848768 21.824616798525667605];

% Layer 2
b2 = -0.88246893788502134282;
LW2_1 = [-17.169906319540920947 -0.96736939253415432649 -0.1144190248320295783 16.208856888812036345];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(2,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+9,11)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3 4 5 6 7 8 9 10]-1,11)+1),20,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 10);
xits = finalxts(finalxts<=10);
xts = finalxts(finalxts>10)-10;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
